{"version":3,"sources":["Reducer.js","App.js","Actions.js","serviceWorker.js","index.js"],"names":["init","tasks","newTask","lastId","show","reducer","state","action","type","map","x","done","id","filter","name","my_todo_list","TodoItem","remove","check","style","width","checked","onClick","App","useReducer","undefined","dispatch","useEffect","useCallback","removeAct","checkAct","changeView","viewAct","addNewTask","setNewTaskName","e","target","value","className","disabled","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21e751f9.chunk.js","sourcesContent":["export const init = {\n  tasks: [],\n  newTask: \"\",\n  lastId: 0,\n  show: \"all\"\n};\nexport const reducer = (state = init, action) => {\n  switch (action.type) {\n    case \"INIT\":\n      return { ...state, tasks: action.tasks, lastId: action.lastId };\n    case \"CHANGE_NEW_TASK_NAME\":\n      return { ...state, newTask: action.newTask };\n    case \"CHECK\":\n      return {\n        ...state,\n        tasks: state.tasks.map(x => ({\n          ...x,\n          done: x.id === action.id ? !x.done : x.done\n        }))\n      };\n    case \"REMOVE\":\n      return { ...state, tasks: state.tasks.filter(x => x.id !== action.id) };\n    case \"CHANGE_VIEW\":\n      return { ...state, show: action.show };\n    case \"ADD_NEW_TASK\":\n      return {\n        ...state,\n        tasks: [\n          ...state.tasks,\n          { id: state.lastId, name: state.newTask, done: false }\n        ],\n        lastId: state.lastId + 1,\n        newTask: \"\"\n      };\n    default:\n      return { ...state };\n  }\n};\n","import React, { useCallback, useReducer, useEffect } from \"react\";\nimport \"./App.css\";\nimport { reducer, init } from \"./Reducer\";\nimport {\n  addTaskAct,\n  changeNameAct,\n  checkAct,\n  initAct,\n  removeAct,\n  viewAct\n} from \"./Actions\";\n\nconst my_todo_list = [\n  { id: 1, name: \"Get Milk\", done: false },\n  { id: 2, name: \"Go to Gym\", done: false },\n  { id: 3, name: \"Call Mom\", done: false },\n  { id: 4, name: \"Work\", done: false },\n  { id: 5, name: \"Send Email\", done: false }\n];\nconst TodoItem = ({ id, name, remove, done, check }) => (\n  <div style={{ width: null }}>\n    <input checked={done} type={\"checkbox\"} onClick={check} />\n    <span>{id}</span> - <span>{name}</span>\n    {\" - \" /*it's a &nbsp. prettier added this automatically*/}\n    <span>{done ? \"done\" : \"undone\"}</span>\n    <button onClick={remove}>delete</button>\n  </div>\n);\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, init, undefined);\n  useEffect(() => dispatch(initAct(my_todo_list, 6)), []); //componentDidMount\n  const remove = useCallback(id => () => dispatch(removeAct(id)), []);\n  const check = useCallback(id => () => dispatch(checkAct(id)), []);\n  const changeView = useCallback(show => () => dispatch(viewAct(show)), []);\n  const addNewTask = useCallback(() => dispatch(addTaskAct()), []);\n  const setNewTaskName = useCallback(\n    e => dispatch(changeNameAct(e.target.value)),\n    []\n  );\n  return (\n    <div className=\"App\">\n      <button disabled={state.show === \"all\"} onClick={changeView(\"all\")}>\n        All\n      </button>\n      <button disabled={state.show === \"done\"} onClick={changeView(\"done\")}>\n        Done\n      </button>\n      <button disabled={state.show === \"undone\"} onClick={changeView(\"undone\")}>\n        Undone\n      </button>\n      <br />\n      {state.tasks\n        .filter(x =>\n          state.show === \"all\" ? true : state.show === \"done\" ? x.done : !x.done\n        )\n        .map(x => (\n          <TodoItem\n            id={x.id}\n            name={x.name}\n            remove={remove(x.id)}\n            check={check(x.id)}\n            done={x.done}\n          />\n        ))}\n      <input type={\"text\"} onChange={setNewTaskName} value={state.newTask} />\n      <button onClick={addNewTask}>Add New Task</button>\n    </div>\n  );\n}\n\nexport default App;\n","export const initAct = (tasks, lastId) => ({ type: \"INIT\", tasks, lastId });\nexport const viewAct = show => ({ type: \"CHANGE_VIEW\", show });\nexport const removeAct = id => ({ type: \"REMOVE\", id });\nexport const checkAct = id => ({ type: \"CHECK\", id });\nexport const addTaskAct = () => ({ type: \"ADD_NEW_TASK\" });\nexport const changeNameAct = newTask => ({\n  type: \"CHANGE_NEW_TASK_NAME\",\n  newTask\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}